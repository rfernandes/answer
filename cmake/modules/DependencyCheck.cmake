FUNCTION(FN_SET_FIND_LIBRARY_PATH path_str)
	separate_arguments(path_str)
	set(ARG_FIND_LIBRARY_PATH ${path_str} PARENT_SCOPE)
	MESSAGE(STATUS "checking for libs in ${path_str}")
ENDFUNCTION(FN_SET_FIND_LIBRARY_PATH)


MACRO(MACRO_CHECK_DEPENDENCIES)

IF("${ARGC}" EQUAL 0)
	#FN_SET_FIND_LIBRARY_PATH("/usr/axis2c/lib /usr/lib /opt/zombiewall/axis2c/lib")
ELSE()
	FN_SET_FIND_LIBRARY_PATH("${ARGN}")
ENDIF()

link_directories (${ARG_FIND_LIBRARY_PATH})

### MANDATORY LIBS LOOP
foreach(MANDATORY_LIB ${MANDATORY_LIBRARIES})
    string(TOUPPER "${MANDATORY_LIB}_LIBRARIES" LIBVAR)
    find_library(${LIBVAR} ${MANDATORY_LIB} ${ARG_FIND_LIBRARY_PATH})
    if (NOT ${LIBVAR})
        message (FATAL_ERROR "[FATAL] lib${MANDATORY_LIB} not found")
    endif ()
    set(MANDATORY_LIBRARIES_LOCATION "${MANDATORY_LIBRARIES_LOCATION} ${${LIBVAR}}")
    include_directories ("/usr/include/lib${MANDATORY_LIB}/")
endforeach()
string(STRIP "${MANDATORY_LIBRARIES_LOCATION}" MANDATORY_LIBRARIES_LOCATION)
separate_arguments(MANDATORY_LIBRARIES_LOCATION)

### MANDATORY LIBS WITHOUT INCLUDES LOOP
foreach(MANDATORY_LIB ${MANDATORY_LIBRARIES_WITHOUT_INCLUDES})
    string(TOUPPER "${MANDATORY_LIB}_LIBRARIES" LIBVAR)
    find_library(${LIBVAR} ${MANDATORY_LIB} ${ARG_FIND_LIBRARY_PATH})
    if (NOT ${LIBVAR})
        message (FATAL_ERROR "[FATAL] lib${MANDATORY_LIB} not found")
    endif ()
    set(MANDATORY_LIBRARIES_LOCATION "${MANDATORY_LIBRARIES_LOCATION} ${${LIBVAR}}")
endforeach()
string(STRIP "${MANDATORY_LIBRARIES_LOCATION}" MANDATORY_LIBRARIES_LOCATION)
separate_arguments(MANDATORY_LIBRARIES_LOCATION)

### OPTIONAL LIBS LOOP
foreach(OPTIONAL_LIB ${OPTIONAL_LIBRARIES})
    string(TOUPPER "${OPTIONAL_LIB}_LIBRARIES" LIBVAR)
    find_library(${LIBVAR} ${OPTIONAL_LIB} ${ARG_FIND_LIBRARY_PATH})
    if (NOT ${LIBVAR})
        message (STATUS "[WARNING] lib${OPTIONAL_LIB} not found")
    else ()
	    set(OPTIONAL_LIBRARIES_LOCATION "${OPTIONAL_LIBRARIES_LOCATION} ${${LIBVAR}}")
	    include_directories ("/usr/include/lib${OPTIONAL_LIB}/")
    endif ()
endforeach()
string(STRIP "${OPTIONAL_LIBRARIES_LOCATION}" OPTIONAL_LIBRARIES_LOCATION)
separate_arguments(OPTIONAL_LIBRARIES_LOCATION)

### OPTIONAL LIBS WITHOUT INCLUDES LOOP
foreach(OPTIONAL_LIB ${OPTIONAL_LIBRARIES_WITHOUT_INCLUDES})
    string(TOUPPER "${OPTIONAL_LIB}_LIBRARIES" LIBVAR)
    find_library(${LIBVAR} ${OPTIONAL_LIB} ${ARG_FIND_LIBRARY_PATH})
    if (NOT ${LIBVAR})
        message (STATUS "[WARNING] lib${OPTIONAL_LIB} not found")
    else ()
	    set(OPTIONAL_LIBRARIES_LOCATION "${OPTIONAL_LIBRARIES_LOCATION} ${${LIBVAR}}")
    endif ()
endforeach()
string(STRIP "${OPTIONAL_LIBRARIES_LOCATION}" OPTIONAL_LIBRARIES_LOCATION)
separate_arguments(OPTIONAL_LIBRARIES_LOCATION)

### MANDATORY PACKAGES LOOP
if(MANDATORY_PACKAGES)
    find_package(PkgConfig)
    pkg_check_modules(MANDATORY_PACKAGES REQUIRED ${MANDATORY_PACKAGES})
    include_directories( ${MANDATORY_PACKAGES_INCLUDE_DIRS} )
endif()

### BOOST LIBS LOOP
if(BOOST_COMPONENTS)
    set(Boost_USE_MULTITHREADED ON)
    find_package(Boost COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
    if (Boost_FOUND )
        include_directories(${Boost_INCLUDE_DIRS})
        # Tries to get the best way to use ASIO
        find_file(BOOST_ASIO_LOCAL_UNIX_BASIC_ENDPOINT name basic_endpoint.hpp PATHS ${Boost_INCLUDE_DIRS}/boost/asio/local)
        if(NOT BOOST_ASIO_LOCAL_UNIX_BASIC_ENDPOINT)
            find_file(ASIO_LOCAL_UNIX_BASIC_ENDPOINT name basic_endpoint.hpp PATHS /usr/include/asio/local)
            message(STATUS "boost-dev version does not support UNIX sockets")
            if (NOT ASIO_LOCAL_UNIX_BASIC_ENDPOINT)
                message(FATAL_ERROR "Asio does not support UNIX sockets")
            else ()
                message(STATUS "Found asio support for UNIX sockets")
                add_definitions(-D_ASIO_STANDALONE=1)
            endif()
        endif()
	set(MAJORMINOR "${Boost_MAJOR_VERSION}${Boost_MINOR_VERSION}")
	string(COMPARE GREATER ${MAJORMINOR} "142" MAJORMINOR)
	if (MAJORMINOR)
		message (STATUS "Using boost::file_system version 3")
		add_definitions(-DBOOST_FILESYSTEM_VERSION=2)
        else()
		message (STATUS "Using boost::file_system version 2")
		add_definitions(-DBOOST_FILESYSTEM_VERSION=2)
        endif()
        message (STATUS "Boost libraries ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION} found" )
    endif()
endif()

### POCO LIBS LOOP
foreach(MANDATORY_LIB ${POCO_COMPONENTS})
    string(TOUPPER "${MANDATORY_LIB}_LIBRARIES" LIBVAR)
    find_library(${LIBVAR} "Poco${MANDATORY_LIB}")
    if (NOT ${LIBVAR})
        message (FATAL_ERROR "[FATAL] Poco${MANDATORY_LIB} not found")
    endif ()
    set(POCO_LIBRARIES_LOCATION "${POCO_LIBRARIES_LOCATION} ${${LIBVAR}}")
    include_directories ("/usr/include/lib${MANDATORY_LIB}/")
endforeach()
string(STRIP "${POCO_LIBRARIES_LOCATION}" POCO_LIBRARIES_LOCATION)
separate_arguments(POCO_LIBRARIES_LOCATION)

### MANDATORY INCLUDES LOOP
foreach(INCLUDE_FILE ${MANDATORY_INCLUDE_CHECKS})
    set (INCLUDE_VAR "")
    file (GLOB_RECURSE INCLUDE_VAR  /usr/include/ /usr/include/*${INCLUDE_FILE} )
    if (NOT INCLUDE_VAR)
        message(FATAL_ERROR "[FATAL] ${INCLUDE_FILE} not found ... check correspondent dev package")
    endif ()
endforeach()

### OPTIONAL INCLUDES LOOP
foreach(INCLUDE_FILE ${OPTIONAL_INCLUDE_CHECKS})
    set (INCLUDE_VAR "")
    file (GLOB_RECURSE INCLUDE_VAR  /usr/include/ /usr/include/*${INCLUDE_FILE} )
    if (NOT INCLUDE_VAR)
        message(WARNING "[WARNING] ${INCLUDE_FILE} not found ... check correspondent dev package")
    else ()
        string (REGEX REPLACE "^\\ *([^\\.]*)\\.h+$" "\\1" COMPONENT_NAME ${INCLUDE_FILE})
        string (TOUPPER "${COMPONENT_NAME}" COMPONENT_NAME)
        add_definitions(-DHAVE_${COMPONENT_NAME})
    endif ()
endforeach()

### MANDATORY CONFIG LOOP
foreach(CONFIG_FILE ${MANDATORY_CONFIG_FILES})
    set (CONFIG_VAR "")
    file (GLOB_RECURSE CONFIG_VAR  ${MANDATORY_CONFIG_PATH}${CONFIG_FILE} )
    if (NOT CONFIG_VAR)
        message(FATAL_ERROR "[FATAL] ${CONFIG_FILE} not found ... check correspondent dev package")
    endif ()
endforeach()

ENDMACRO(MACRO_CHECK_DEPENDENCIES)
